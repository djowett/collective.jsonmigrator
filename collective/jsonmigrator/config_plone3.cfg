[transmogrifier]
pipeline =
    remotesource
    folders
    type-substitution    
    removeid
# You'll probaby have errors on missing paths if you try running this on the first attempt
# enable on a second run
    fix-path-criterion
    constructor
    schema
    uid
    datafields
# appears to be broken in Plone 3.3
#    browser-default
    get-last-workflow-state
    calc-workflow-transition
    workflowupdater
# Doesn't work for me!
#    workflow-history
# Sort properties like title & default page
    encode-properties
#    remove-defaultpage
    apply-properties
#    permissions
    owner
    local_roles
    mimetype
    commit
    IMPORTING

[remotesource]
blueprint = collective.jsonmigrator.remotesource
remote-url=http://127.0.0.1:8065/default
remote-path=/familymatters/
remote-username=admin
remote-password=plone
remote-crawl-depth=-1
remote-skip-path=
    /HTTPCache
    /MailHost
    /RAMCache
    /access_rule
    /acl_users
    /archetype_tool
    /caching_policy_manager
    /challenge_hook
    /content_type_registry
    /error_log
    /kupu_library_tool
    /marshaller_registry
    /mimetypes_registry
    /plone_utils
    /portal_actionicons
    /portal_actions
    /portal_archivist
    /portal_article
    /portal_atct
    /portal_calendar
    /portal_catalog
    /portal_controlpanel
    /portal_css
    /portal_diff
    /portal_discussion
    /portal_enfold_utilities
    /portal_factory
    /portal_file_templates
    /portal_form_controller
    /portal_fss
    /portal_groupdata
    /portal_groups
    /portal_historiesstorage
    /portal_interface
    /portal_javascripts
    /portal_kss
    /portal_languages
    /portal_lock_manager
    /portal_memberdata
    /portal_membership
    /portal_metadata
    /portal_migration
    /portal_modifier
    /portal_password_reset
    /portal_placeful_workflow
    /portal_properties
    /portal_quickinstaller
    /portal_registration
    /portal_setup
    /portal_skins
    /portal_squid
    /portal_syndication
    /portal_transforms
    /portal_types
    /portal_uidannotation
    /portal_uidgenerator
    /portal_uidhandler
    /portal_undo
    /portal_url
    /portal_view_customizations
    /portal_vocabularies
    /portal_workflow
    /property_set_registry
    /reference_catalog
    /translation_service
    /uid_catalog
    /workflow_catalog
    .wf_policy_config

[folders]
blueprint = collective.transmogrifier.sections.folders
folder-type=Folder

[type-substitution]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = python:'Large Plone Folder'
condition = python: item['_type'] == 'Folder'

[removeid]
blueprint = collective.transmogrifier.sections.manipulator
delete = id

# Fix Path Criterion: need to set value from atrefs
[fix-path-criterion]
blueprint = collective.transmogrifier.sections.inserter
key = string:value
#'/default/' here should be replaced with the name of your plone instance
value = python: [ transmogrifier.context.unrestrictedTraverse(path[len('/default/'):]).UID() 
                  for path in item['_atrefs'].get('paths',[])]
condition = python: item['_type'] == "ATPathCriterion"

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[schema]
blueprint = plone.app.transmogrifier.atschemaupdater

[uid]
blueprint = plone.app.transmogrifier.uidupdater

[browser-default]
blueprint = plone.app.transmogrifier.browserdefault

[datafields]
blueprint = collective.jsonmigrator.datafields

[workflow-history]
blueprint = collective.jsonmigrator.workflowhistory
workflowhistory-key = _workflow_history

[permissions]
blueprint = collective.jsonmigrator.permissions

[owner]
blueprint = collective.jsonmigrator.owner

[local_roles]
blueprint = collective.jsonmigrator.local_roles

[mimetype]
blueprint = collective.jsonmigrator.mimetype

# Save our work gradually, rather than as one big transaction
[commit]
blueprint = collective.jsonmigrator.partialcommit
every = 20

[IMPORTING]
blueprint = quintagroup.transmogrifier.logger
keys = 
    _type
    _path
    _defaultpage
    value
#    _properties
#    title
#    _workflow_state
#    _transitions
#    _workflow_history


# Find the last workflow state (& workflow name) in the workflow_history
[get-last-workflow-state]
blueprint = collective.transmogrifier.sections.inserter
key = string:_workflow_state
# Get time-sorted tuples out of workflow_history and choose review_state of the last one. Simples!
value = python:sorted([
                        (wf_item['time'], wf_item['review_state'], wf_name)
                            for wf_name in item['_workflow_history']
                                for wf_item in item['_workflow_history'][wf_name]
                                ])[-1][1:]
condition = python: item.has_key('_workflow_history')

# Find out which workflow transition(s) we need to get from the initial state
# to the last workflow state calculated above (_workflow_state[0])
[calc-workflow-transition]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
value = python:{"private": "hide", 
                "internally_published": "publish_internally", 
                "pending": "submit", 
                "external": ("submit", "publish_externally")}[item['_workflow_state'][0]]
condition = python: (item.has_key('_workflow_state') and 
                     item['_workflow_state'][0] in ['external','private','internally_published','pending'] and
                     item['_type'] in ("Document","Event","Favorite","File","Folder","Link","News Item","Topic","Window"))

# Actually run the given transition to update the workflow state
[workflowupdater]
blueprint = plone.app.transmogrifier.workflowupdater


# Encode the properties dictionary to utf-8
[encode-properties]
blueprint = collective.transmogrifier.sections.inserter
key = string:_properties
value = python: [ [isinstance(a, basestring) and a.encode('utf-8') or a for a in b] for b in item['_properties']]
condition = python: item.has_key('_properties')

# We don't need this... default_page is set by properties below
[remove-defaultpage]
blueprint = collective.transmogrifier.sections.manipulator
delete = _defaultpage

# Apply encoded properties dictionary (including title & default_page) to the object
[apply-properties]
blueprint = collective.jsonmigrator.properties
properties-key = 
    _properties
